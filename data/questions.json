{
"questions":[
  {
    "id":0,
    "description":"石头剪子布，是一种猜拳游戏。起源于中国，然后传到日本、朝鲜等地，随着亚欧贸易的不断发展它传到了欧洲，到了近现代逐渐风靡世界。简单明了的规则，使得石头剪子布没有任何规则漏洞可钻，单次玩法比拼运气，多回合玩法比拼心理博弈，使得石头剪子布这个古老的游戏同时用于\"意外\"与\"技术\"两种特性，深受世界人民喜爱。 \n游戏规则：石头打剪刀，布包石头，剪刀剪布。 \n现在，需要你写一个程序来判断石头剪子布游戏的结果。",
    "img":"Q1.png",
    "inputStyle":"(play.in)",
    "inputTip":"输入包括N+1行：\n第一行是一个整数N，表示一共进行了N次游戏。1 <= N <= 100。\n接下来N行的每一行包括两个字符串，表示游戏参与者Player1，Player2的选择（石头、剪子或者是布）：\nS1 S2字符串之间以空格隔开S1,S2只可能取值在{\"Rock\", \"Scissors\", \"Paper\"}（大小写敏感）中。",
    "inputExample":"3\nRock Scissors\nPaper Paper\nRock  Paper",
    "outputStyle":"(play.out)",
    "outputTip":"输出包括N行，每一行对应一个胜利者（Player1或者Player2），或者游戏出现平局，则输出Tie。",
    "outputExample":"Player1\nTie\nPlayer2"
  },
  {
    "id":1,
    "description":"一个长度为n（n>0）的序列中存在“有趣的跳跃”当前仅当相邻元素的差的绝对值经过排序后正好是从1到(n-1)。例如，1 4 2 3存在“有趣的跳跃”，因为差的绝对值分别为3,2,1。当然，任何只包含单个元素的序列一定存在“有趣的跳跃”。你需要写一个程序判定给定序列是否存在“有趣的跳跃”。",
    "img":"",
    "inputStyle":"(jolly.in)",
    "inputTip":"一行，第一个数是n（0 < n < 3000），为序列长度，接下来有n个整数，依次为序列中各元素，各元素的绝对值均不超过1,000,000,000。",
    "inputExample":"[输入1] 4 1 4 2 3\n[输入2] 5 2 6 1 3 4",
    "outputStyle":"(jolly.out)",
    "outputTip":"[输出1] Jolly \n [输出2] Not ",
    "outputExample":"Player1\nTie\nPlayer2"
  },
  {
    "id":2,
    "description":"给定一个5*5的矩阵，每行只有一个最大值，每列只有一个最小值，寻找这个矩阵的鞍点。\n鞍点指的是矩阵中的一个元素，它是所在行的最大值，并且是所在列的最小值。\n例如：在下面的例子中（第4行第1列的元素就是鞍点，值为8 ）。\n11  3  5  6  9\n12  4  7  8 10\n10  5  6  9 11\n 8  6  4  7  2\n15 10 11 20 25",
    "img":"",
    "inputStyle":"(matrix.in)",
    "inputTip":"输入包含一个5行5列的矩阵。",
    "inputExample":"11  3  5  6  9\n12  4  7  8 10\n10  5  6  9 11\n 8  6  4  7  2\n15 10 11 20 25",
    "outputStyle":"(matrix.out)",
    "outputTip":"如果存在鞍点，输出鞍点所在的行、列及其值，如果不存在，输出\"not found\"。",
    "outputExample":"4 1 8"
  },
  {
    "id":3,
    "description":"给定一个整数，请将该数各个位上数字反转得到一个新数。新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零（参见样例2）。\n数据范围：-1,000,000,000≤ N≤ 1,000,000,000 。",
    "img":"",
    "inputStyle":"(reverse.in)",
    "inputTip":"输入共1 行，一个整数 N。",
    "inputExample":"[输入1]\n123\n[输入2]\n-380",
    "outputStyle":"(reverse.out)",
    "outputTip":"输出共1行，一个整数，表示反转后的新数。",
    "outputExample":"[输出1]\n321\n[输出2]\n-83"
  },
  {
    "id":4,
    "description":"某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前5名学生发奖学金。期末，每个学生都有3门课的成绩:语文、数学、英语。先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，如果两个同学总分和语文成绩都相同，那么规定学号小的同学排在前面，这样，每个学生的排序是唯一确定的。\n任务：先根据输入的3门课的成绩计算总分，然后按上述规则排序，最后按排名顺序输出前五名名学生的学号和总分。注意，在前5名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。例如，在某个正确答案中，如果前两行的输出数据(每行输出两个数:学号、总分) 是:\n7 279\n5 279\n这两行数据的含义是:总分最高的两个同学的学号依次是7号、5号。这两名同学的总分都是 279 (总分等于输入的语文、数学、英语三科成绩之和) ，但学号为7的学生语文成绩更高一些。如果你的前两名的输出数据是:\n5 279\n7 279\n则按输出错误处理，不能得分。",
    "img":"",
    "inputStyle":"(scholarship.in)",
    "inputTip":"包含n+1行: \n第1行为一个正整数n，表示该校参加评选的学生人数。 \n第2到n+1行，每行有3个用空格隔开的数字，每个数字都在0到100之间。第j行的3个数字依次表示学号为 j-1 的学生的语文、数学、英语的成绩。每个学生的学号按照输入顺序编号为1~n (恰好是输入数据的行号减1)。 \n所给的数据都是正确的，不必检验。\n50%的数据满足:各学生的总成绩各不相同；\n100%的数据满足: 6<=n<=300。",
    "inputExample":"6\n90 67 80\n87 66 91\n78 89 91\n88 99 77\n67 89 64\n78 89 98",
    "outputStyle":"(scholarship.out)",
    "outputTip":"共有5行，每行是两个用空格隔开的。",
    "outputExample":"6 265\n4 264\n3 258\n2 244\n1 237"
  },
  {
    "id":5,
    "description":"某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？\n数据范围：测验题给出的正整数大小不超过10,000。",
    "img":"",
    "inputStyle":"(count.in)",
    "inputTip":"输入共两行，第一行包含一个整数n，表示测试题中给出的正整数个数。\n第二行有n个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。",
    "inputExample":"4\n1 2 3 4",
    "outputStyle":"(count.out)",
    "outputTip":"输出共一行，包含一个整数，表示测验题答案。",
    "outputExample":"2"
  },
  {
    "id":6,
    "description":"一个n行n列的螺旋矩阵可由如下方法生成：\n从矩阵的左上角（第1行第1列）出发，初始时向右移动；如果前方是未曾经过的格子，则继续前进，否则右转；重复上述操作直至经过矩阵中所有格子。根据经过顺序，在格子中依次填入1, 2, 3, ... , n，便构成了一个螺旋矩阵。\n下图是一个n = 4 时的螺旋矩阵。\n 1  2  3  4\n12 13 14  5\n11 16 15  6\n10  9  8  7\n现给出矩阵大小n以及i和j，请你求出该矩阵中第i行第j列的数是多少。",
    "img":"",
    "inputStyle":"(matrix .in)",
    "inputTip":"输入共一行，包含三个整数 n，i，j，每两个整数之间用一个空格隔开，分别表示矩阵大小、待求的数所在的行号和列号。",
    "inputExample":"4 2 3",
    "outputStyle":"(matrix .out)",
    "outputTip":"输出共一行，包含一个整数，表示相应矩阵中第i行第j列的数。",
    "outputExample":"14"
  },
  {
    "id":7,
    "description":"在Internet上的搜索引擎经常需要对信息进行比较，比如可以通过某个人对一些事物的排名来估计他（或她）对各种不同信息的兴趣，从而实现个性化的服务。\n对于不同的排名结果可以用逆序来评价它们之间的差异。考虑1,2,…,n的排列i1，i2，…，in，如果其中存在j,k，满足 j < k 且 ij > ik， 那么就称(ij,ik)是这个排列的一个逆序。\n一个排列含有逆序的个数称为这个排列的逆序数。例如排列 263451 含有8个逆序(2,1),(6,3),(6,4),(6,5),(6,1),(3,1),(4,1),(5,1)，因此该排列的逆序数就是8。显然，由1,2,…,n 构成的所有n!个排列中，最小的逆序数是0，对应的排列就是1,2,…,n；最大的逆序数是n(n-1)/2，对应的排列就是n,(n-1),…,2,1。逆序数越大的排列与原始排列的差异度就越大。\n现给定1,2,…,n的一个排列，求它的逆序数。",
    "img":"",
    "inputStyle":"(inverse.in)",
    "inputTip":"第一行是一个整数n，表示该排列有n个数（n <= 100000)。\n第二行是n个不同的正整数，之间以空格隔开，表示该排列。",
    "inputExample":"6\n2 6 3 4 5 1",
    "outputStyle":"(inverse.out)",
    "outputTip":"输出该排列的逆序数。",
    "outputExample":"8"
  },
  {
    "id":8,
    "description":"已知一个已经从小到大排序的数组，这个数组的一个平台（Plateau）就是连续的一串值相同的元素，并且这一串元素不能再延伸。例如，在 1，2，2，3，3，3，4，5，5，6中1，2-2，3-3-3，4，5-5，6都是平台。试编写一个程序，接收一个数组，把这个数组最长的平台找出 来。在上面的例子中3-3-3就是最长的平台。",
    "img":"",
    "inputStyle":"(platform.in)",
    "inputTip":"第一行有一个整数n(n <= 1000)，为数组元素的个数。第二行有n个整数，整数之间以一个空格分开。",
    "inputExample":"10\n1 2 2 3 3 3 4 5 5 6 ",
    "outputStyle":"(platform.out)",
    "outputTip":"输出最长平台的长度。",
    "outputExample":"3"
  },
  {
    "id":9,
    "description":"经过一段时间的紧张筹备，电脑小组的“RP餐厅”终于开业了，这天，经理LXC接到了一个定餐大单，可把大家乐坏了！员工们齐心协力按要求准备好了套餐正准备派送时，突然碰到一个棘手的问题，筷子！CX小朋友找出了餐厅中所有的筷子，但遗憾的是这些筷子长短不一，而我们都知道筷子需要长度一样的才能组成一双，更麻烦的是CX找出来的这些筷子数量为奇数，但是巧合的是，这些筷子中只有一只筷子是落单的，其余都成双，善良的你，可以帮CX找出这只落单的筷子的长度吗？",
    "img":"",
    "inputStyle":"(chopsticks.in)",
    "inputTip":"第一行读入一个数N，它代表CX找到的筷子的根数。\n第二行是N个用空格隔开的数，代表筷子的长度。\n说明：\n对于80%的数据，N<=100000；",
    "inputExample":"9\n2 2 1 3 3 3 2 3 1",
    "outputStyle":"(chopsticks.out)",
    "outputTip":"一行，落单的筷子的长度。",
    "outputExample":"2"
  },
  {
    "id":10,
    "description":"输入三个自然数N，p，q （1<=p<=N，1<=q<=N），输出在一个N*N格的棋盘中（行列均从1开始编号），与格子（p，q）同行、同列、同一对角线的所有格子的位置。如：n=4，p=2，q=3表示了棋盘中的第二行第三列的格子，如右图：",
    "img":"Q10.png",
    "inputStyle":"(grid.in)",
    "inputTip":"一行，三个自然数N，p，q，相邻两个数之间用单个空格隔开。1 <= N <= 10。",
    "inputExample":"4 2 3",
    "outputStyle":"(grid.out)",
    "outputTip":"四行：\n第一行：从左到右输出同一行格子位置；\n第二行：从上到下输出同一列格子位置；\n第三行：从左上到右下输出同一对角线格子位置；\n第四行：从左下到右上输出同一对角线格子位置。\n其中每个格子位置用如下格式输出：(x,y)，x为行号，y为列号，采用英文标点，中间无空格。\n相邻两个格子位置之间用单个空格隔开。",
    "outputExample":"(2,1) (2,2) (2,3) (2,4)\n(1,3) (2,3) (3,3) (4,3)\n(1,2) (2,3) (3,4)\n(4,1) (3,2) (2,3) (1,4）"
  },
  {
    "id":11,
    "description":"请统计某个给定范围[L, R]的所有整数中，数字 2 出现的次数。\n比如给定范围[2, 22]，数字 2 在数 2 中出现了 1 次，在数 12 中出现 1 次，在数 20 中出现 1 次，在数 21 中出现 1 次，在数 22 中出现 2 次，所以数字 2 在该范围内一共出现了 6次。\n数据范围：1 ≤ L ≤R≤ 10000。",
    "img":"",
    "inputStyle":"(two.in)",
    "inputTip":"输入共 1 行，为两个正整数 L 和 R，之间用一个空格隔开。",
    "inputExample":"[输入1]\n2 22\n[输出1]\n6",
    "outputStyle":"(two.out)",
    "outputTip":"输出共 1 行，表示数字 2 出现的次数。",
    "outputExample":"[输入2]\n2 100\n[输出2]\n20"
  }
,
  {
    "id":12,
    "description":"火车从始发站（称为第1站）开出，在始发站上车的人数为a，然后到达第2站，在第2站有人上、下车，但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下车的人数有一定规律：上车的人数都是上两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的条件是：共有n个车站，始发站上车的人数为a，最后一站下车的人数是m（全部下车）。试问x站开出时车上的人数是多少？",
    "img":"",
    "inputStyle":"(train.in)",
    "inputTip":"一行，包含四个整数a，n，m和x，相邻两个整数之间用单个空格隔开。0 <= a <= 10, 3 <= x < n <= 15, 0 <= m <= 10000。\n题目保证数据有唯一解。允许有人在同一站上下车。",
    "inputExample":"5 7 32 4",
    "outputStyle":"(train.out)",
    "outputTip":"一个整数，为从x站开出时车上的人数。",
    "outputExample":"13"
  }
]
}