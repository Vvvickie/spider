[
  {
    "id": "1526",
    "category": "4.3算法之图论",
    "title": "1526:宗教信仰",
    "description": "<div style=\"font-family: 'lucida Grande', Verdana; font-size: 14px; line-height: 23px; white-space: normal; background-color: rgb(255, 255, 255); \">世界上有许多宗教，你感兴趣的是你学校里的同学信仰多少种宗教。</div><div style=\"font-family: 'lucida Grande', Verdana; font-size: 14px; line-height: 23px; white-space: normal; background-color: rgb(255, 255, 255); \">你的学校有n名学生（0 < n <= 50000），你不太可能询问每个人的宗教信仰，因为他们不太愿意透露。但是当你同时找到2名学生，他们却愿意告诉你他们是否信仰同一宗教，你可以通过很多这样的询问估算学校里的宗教数目的上限。你可以认为每名学生只会信仰最多一种宗教。</div><p><br></p>",
    "img": "",
    "inputTip": "输入包括多组数据。每组数据的第一行包括n和m，0 <= m <= n(n-1)/2，其后m行每行包括两个数字i和j，表示学生i和学生j信仰同一宗教，学生被标号为1至n。输入以一行 n = m = 0 作为结束。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "对于每组数据，先输出它的编号（从1开始），接着输出学生信仰的不同宗教的数目上限。",
    "inputExample": "<pre>10 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n10 4\n2 3\n4 5\n4 8\n5 8\n0 0\n</pre>",
    "outputExample": "<pre>Case 1: 1\nCase 2: 7\n</pre>",
    "tip": "",
    "timeLimited": "5000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "1538",
    "category": "4.3算法之图论",
    "title": "1538:Gopher II",
    "description": "The gopher family, having averted the canine threat, must face a new predator. <br><br>The are n gophers and m gopher holes, each at distinct (x, y) coordinates. A hawk arrives and if a gopher does not reach a hole in s seconds it is vulnerable to being eaten. A hole can save at most one gopher. All the gophers run at the same velocity v. The gopher family needs an escape strategy that minimizes the number of vulnerable gophers.",
    "img": "",
    "inputTip": "The input contains several cases. The first line of each case contains four positive integers less than 100: n, m, s, and v. The next n lines give the coordinates of the gophers; the following m lines give the coordinates of the gopher holes. All distances are in metres; all times are in seconds; all velocities are in metres per second. ",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "Output consists of a single line for each case, giving the number of vulnerable gophers.",
    "inputExample": "<pre>2 2 5 10\n1.0 1.0\n2.0 2.0\n100.0 100.0\n20.0 20.0</pre>",
    "outputExample": "<pre>1\n</pre>",
    "tip": "Waterloo local 2001.01.27",
    "timeLimited": "2000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "253",
    "category": "4.3算法之图论",
    "title": "253:丛林中的路",
    "description": "<center><br>  <img src=\"http://media.openjudge.cn/images/1251_1.jpg\"></center><br><p>热带岛屿Lagrishan的首领现在面临一个问题：几年前，一批外援资金被用于维护村落之间的道路，但日益繁茂的丛林无情的侵蚀着村民的道路，导致道路维修开销巨大，长老会不得不放弃部分道路的维护。上图左侧图显示的是正在使用道路的简图以及每条路每个月的维修费用（单位为aacms）。现在长老会需要提出一种方案，即需要保证村落之间都可以互相到达，又要将每个月的道路维修费用控制在最小。村子编号为从A到I。上图右侧显示的方案最小维修开销为216 aacms每月。</p>",
    "img": "",
    "inputTip": "输入包含1~100个数据集，最后一行为0.每个数据集第一行为村落数目n, 1 < n < 27,依次用字母表的前n个字母标记。接下来有n-1行，每行的第一个数据便是按字母顺序排列的村子编号（不包括最后一个村庄）。每个村庄后面的数据k代表该村庄通往编号在其之后的村庄的道路数目，如A 2 B 12 I 25，代表A村庄有2个编号在A之后的村庄和其相连。若k大于0，k后面会依次给出这k个村庄的编号以及各自到起始村庄的道路维修费用，如A 2 B 12 I 25，代表A和B之间道路维修费用为12， A和I之间道路维修费用为25（维修费用为不超过100的正整数）.路的总数目不超过75条，每个村庄到其他村庄不会有超过15条路（包括编号在其之前和之后的）。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "每个数据集有一个输出：针对解决方案每个月维修道路的小费用。提示：蛮力算法虽能找出解决方案，但将会超出时间限制。",
    "inputExample": "<pre>9\nA 2 B 12 I 25\nB 3 C 10 H 40 I 8\nC 2 D 18 G 55\nD 1 E 44\nE 2 F 60 G 38\nF 0\nG 1 H 35\nH 1 I 35\n3\nA 2 B 10 C 40\nB 1 C 20\n0</pre>",
    "outputExample": "<pre>216\n30</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "726",
    "category": "4.3算法之图论",
    "title": "726:ROADS",
    "description": "N cities named with numbers 1 ... N are connected with one-way roads. Each road has two parameters associated with it : the road length and the toll that needs to be paid for the road (expressed in the number of coins). <br>Bob and Alice used to live in the city 1. After noticing that Alice was cheating in the card game they liked to play, Bob broke up with her and decided to move away - to the city N. He wants to get there as quickly as possible, but he is short on cash. <br><br>We want to help Bob to find <b>the shortest path</b> from the city 1 to the city N <b>that he can afford</b> with the amount of money he has. <br>",
    "img": "",
    "inputTip": "The first line of the input contains the integer K, 0 <= K <= 10000, maximum number of coins that Bob can spend on his way. The second line contains the integer N, 2 <= N <= 100, the total number of cities. The third line contains the integer R, 1 <= R <= 10000, the total number of roads. Each of the following R lines describes one road by specifying integers S, D, L and T separated by single blank characters : S is the source city, 1 <= S <= N D is the destination city, 1 <= D <= N L is the road length, 1 <= L <= 100 T is the toll (expressed in the number of coins), 0 <= T <=100Notice that different roads may have the same source and destination cities. ",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "The first and the only line of the output should contain the total length of the shortest path from the city 1 to the city N whose total toll is less than or equal K coins. If such path does not exist, only number -1 should be written to the output. ",
    "inputExample": "<pre>5\n6\n7\n1 2 2 3\n2 4 3 3\n3 4 2 4\n1 3 4 1\n4 6 2 1\n3 5 2 0\n5 4 3 2\n</pre>",
    "outputExample": "<pre>11</pre>",
    "tip": "CEOI 1998",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "799",
    "category": "4.3算法之图论",
    "title": "799:Heavy Transportation",
    "description": "Background<br>Hugo Heavy is happy. After the breakdown of the Cargolifter project he can now expand business. But he needs a clever man who tells him whether there really is a way from the place his customer has build his giant steel crane to the place where it is needed on which all streets can carry the weight.<br>Fortunately he already has a plan of the city with all streets and bridges and all the allowed weights.Unfortunately he has no idea how to find the the maximum weight capacity in order to tell his customer how heavy the crane may become. But you surely know.<br><br>Problem<br>You are given the plan of the city, described by the streets (with weight limits) between the crossings, which are numbered from 1 to n. Your task is to find the maximum weight that can be transported from crossing 1 (Hugo's place) to crossing n (the customer's place). You may assume that there is at least one path. All streets can be travelled in both directions.",
    "img": "",
    "inputTip": "The first line contains the number of scenarios (city plans). For each city the number n of street crossings (1 <= n <= 1000) and number m of streets are given on the first line. The following m lines contain triples of integers specifying start and end crossing of the street and the maximum allowed weight, which is positive and not larger than 1000000. There will be at most one street between each pair of crossings.",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "The output for every scenario begins with a line containing \"Scenario #i:\", where i is the number of the scenario starting at 1. Then print a single line containing the maximum allowed weight that Hugo can transport to the customer. Terminate the output for the scenario with a blank line.",
    "inputExample": "<pre>1\n3 3\n1 2 3\n1 3 4\n2 3 5\n</pre>",
    "outputExample": "<pre>Scenario #1:\n4\n</pre>",
    "tip": "TUD Programming Contest 2004, Darmstadt, Germany",
    "timeLimited": "3000ms",
    "spaceLimited": "65536kB"
  }
]