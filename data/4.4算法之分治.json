[
  {
    "id": "1708",
    "category": "4.4算法之分治",
    "title": "1708:麦森数",
    "description": "形如2<sup>p</sup>-1的素数称为麦森数，这时P一定也是个素数。但反过来不一定，即如果P是个素数。2<sup>p</sup>-1不一定也是素数。到1998年底，人们已找到了37个麦森数。最大的一个是P=3021377，它有909526位。麦森数有许多重要应用，它与完全数密切相关。<br> 任务：从文件中输入P (1000<P<3100000) ,计算2<sup>p</sup>-1的位数和最后500位数字（用十进制高精度数表示）",
    "img": "",
    "inputTip": "文件中只包含一个整数P(1000<P<3100000)",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "第1行：十进制高精度数2p-1的位数。第2-11行：十进制高精度数2p-1的最后500位数字。（每行输出50位，共输出10行，不足500位时高位补0）不必验证2p-1与P是否为素数。",
    "inputExample": "<pre>1279</pre>",
    "outputExample": "<pre>386\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000104079321946643990819252403273640855\n38615262247266704805319112350403608059673360298012\n23944173232418484242161395428100779138356624832346\n49081399066056773207629241295093892203457731833496\n61583550472959420547689811211693677147548478866962\n50138443826029173234888531116082853841658502825560\n46662248318909188018470682222031405210266984354887\n32958028878050869736186900714720710555703168729087\n</pre>",
    "tip": "联赛复赛试题2003",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "943",
    "category": "4.4算法之分治",
    "title": "943:The Sierpinski Fractal",
    "description": "<p>Consider a regular triangular area, divide it into four equal triangles of half height and remove the one in the middle. Apply the same operation recursively to each of the three remaining triangles. If we repeated this procedure infinite times, we'd obtain something with an area of zero. The fractal that evolves this way is called the Sierpinski Triangle. Although its topological dimension is 2, its Hausdorff-Besicovitch dimension is log(3)/log(2)~1.58, a fractional value (that's why it is called a fractal). By the way, the Hausdorff-Besicovitch dimension of the Norwegian coast is approximately 1.52, its topological dimension being 1. <br><br>For this problem, you are to outline the Sierpinski Triangle up to a certain recursion depth, using just ASCII characters. Since the drawing resolution is thus fixed, you'll need to grow the picture appropriately. Draw the smallest triangle (that is not divided any further) with two slashes, to backslashes and two underscores like this: <br></p><pre> /\\<br>/__\\<br></pre><p>To see how to draw larger triangles, take a look at the sample output.</p>",
    "img": "",
    "inputTip": "The input contains several testcases. Each is specified by an integer n. Input is terminated by n=0. Otherwise 1<=n<=10 indicates the recursion depth.",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "For each test case draw an outline of the Sierpinski Triangle with a side's total length of 2n characters. Align your output to the left, that is, print the bottom leftmost slash into the first column. The output must not contain any trailing blanks. Print an empty line after each test case.",
    "inputExample": "<pre>3\n2\n1\n0\n</pre>",
    "outputExample": "<pre>       /\\\n      /__\\\n     /\\  /\\\n    /__\\/__\\\n   /\\      /\\\n  /__\\    /__\\\n /\\  /\\  /\\  /\\\n/__\\/__\\/__\\/__\\\n\n   /\\\n  /__\\\n /\\  /\\\n/__\\/__\\\n\n /\\\n/__\\\n</pre>",
    "tip": "The Sierpinski-Triangle up to recursion depth 7 ",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  }
]