[
  {
    "id": "6186",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "01:简单算术表达式求值",
    "description": "<p>两位正整数的简单算术运算（只考虑整数运算），算术运算为： </p><p>+，加法运算；<br>-，减法运算；<br>*，乘法运算；<br>/，整除运算；<br>%，取余运算。 </p><p>算术表达式的格式为（运算符前后可能有空格）：<br>运算数 运算符 运算数 </p><p>请输出相应的结果。<br></p>",
    "img": "",
    "inputTip": "一行算术表达式。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "整型算数运算的结果（结果值不一定为2位数，可能多于2位或少于2位）。",
    "inputExample": "<pre>32+64</pre>",
    "outputExample": "<pre>96</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "6173",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "02:短信计费",
    "description": "<p>用手机发短信，一条短信资费为0.1元，但限定一条短信的内容在70个字以内（包括70个字）。如果你一次所发送的短信超过了70个字，则会按照每70个字一条短信的限制把它分割成多条短信发送。假设已经知道你当月所发送的短信的字数，试统计一下你当月短信的总资费。<br></p>",
    "img": "",
    "inputTip": "第一行是整数n，表示当月发送短信的总次数，接着n行每行一个整数，表示每次短信的字数。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出一行，当月短信总资费，单位为元，精确到小数点后1位。",
    "inputExample": "<pre>10\n39\n49\n42\n61\n44\n147\n42\n72\n35\n46</pre>",
    "outputExample": "<pre>1.3</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7540",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "03:甲流病人初筛",
    "description": "<p>目前正是甲流盛行时期，为了更好地进行分流治疗，医院在挂号时要求对病人的体温和咳嗽情况进行检查，对于体温超过37.5度（含等于37.5度）并且咳嗽的病人初步判定为甲流病人（初筛）。现需要统计某天前来挂号就诊的病人中有多少人被初筛为甲流病人。<br></p>",
    "img": "",
    "inputTip": "第一行是某天前来挂号就诊的病人数n。（n < 200）其后有n行，每行是病人的信息，包括三个信息：姓名（字符串，不含空格，最多8个字符）、体温（float）、是否咳嗽（整数，1表示咳嗽，0表示不咳嗽）。每行三个信息之间以一个空格分开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "按输入顺序依次输出所有被筛选为甲流的病人的姓名，每个名字占一行。之后在输出一行，表示被筛选为甲流的病人数量。",
    "inputExample": "<pre>5\nZhang 38.3 0\nLi 37.5 1\nWang 37.1 1\nZhao 39.0 1\nLiu 38.2 1</pre>",
    "outputExample": "<pre>Li\nZhao\nLiu\n3</pre>",
    "tip": "医学部2009期末考试",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7598",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "04:最匹配的矩阵",
    "description": "<p>给定一个m*n的矩阵A和r*s的矩阵B,其中0 < r ≤ m, 0 < s ≤ \nn，A、B所有元素值都是小于100的正整数。求A中一个大小为r*s的子矩阵C，使得<span style=\"white-space: normal;\">B和C的对应元素差值的绝对值之和最小，这时称C为最匹配的矩阵。如果有多个子矩阵同时满足条件，选择子矩阵左上角元素行号小者，行号相同时，选择列号小者。</span></p>",
    "img": "",
    "inputTip": "第一行是m和n，以一个空格分开。之后m行每行有n个整数，表示A矩阵中的各行，数与数之间以一个空格分开。第m+2行为r和s，以一个空格分开。之后r行每行有s个整数，表示B矩阵中的各行，数与数之间以一个空格分开。（1 ≤ m ≤ 100,1 ≤ n ≤ 100）",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出矩阵C，一共r行，每行s个整数，整数之间以一个空格分开。",
    "inputExample": "<pre>3 3\n3 4 5\n5 3 4\n8 2 4\n2 2\n7 3\n4 9</pre>",
    "outputExample": "<pre>4 5 \n3 4 </pre>",
    "tip": "医学部 2010 期末试题 林洪武",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7920",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "05:统计单词数",
    "description": "<p>一般的文本编辑器都有查找单词的功能，该功能可以快速定位特定单词在文章中的位置，有的还能统计出特定单词在文章中出现的次数。</p><p>现在，请你编程实现这一功能，具体要求是：给定一个单词，请你输出它在给定的文章中出现的次数和第一次出现的位置。<strong>注意：匹配单词时，不区分大小写，但要求完全匹配，即给定单词必须与文章中的某一独立单词在不区分大小写的情况下完全相同（参见样例1），如果给定单词仅是文章中某一单词的一部分则不算匹配（参见样例2）。</strong></p>",
    "img": "",
    "inputTip": "2 行。第 1 行为一个字符串，其中只含字母，表示给定单词；第 2 行为一个字符串，其中只可能包含字母和空格，表示给定的文章。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "只有一行，如果在文章中找到给定单词则输出两个整数，两个整数之间用一个空格隔开，分别是单词在文章中出现的次数和第一次出现的位置（即在文章中第一次出现时，单词首字母在文章中的位置，位置从0开始）；如果单词在文章中没有出现，则直接输出一个整数-1。",
    "inputExample": "<pre>样例 #1：\nTo\nto be or not to be is a question\n\n样例 #2：\nto\nDid the Ottoman Empire lose its power at that time</pre>",
    "outputExample": "<pre>样例 #1：\n2 0\n\n样例 #2：\n-1</pre>",
    "tip": "NOIP2011复赛 普及组 第二题",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7923",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "06:寻宝",
    "description": "<p>传说很遥远的藏宝楼顶层藏着诱人的宝藏。小明历尽千辛万苦终于找到传说中的这个藏 宝楼，藏宝楼的门口竖着一个木板，上面写有几个大字：寻宝说明书。说明书的内容如下：</p><p>藏宝楼共有 N+1 层，最上面一层是顶层，顶层有一个房间里面藏着宝藏。除了顶层外，藏宝楼另有 N 层，每层 M 个房间，这 M 个房间围成一圈并按逆时针方向依次编号为 0，…， M-1。其中一些房间有通往上一层的楼梯，每层楼的楼梯设计可能不同。每个房间里有一个指示牌，指示牌上有一个数字 x，表示从这个房间开始按逆时针方向选择第 x 个有楼梯的房间（假定该房间的编号为 k），从该房间上楼，上楼后到达上一层的 k 号房间。比如当前房间的指示牌上写着 2，则按逆时针方向开始尝试，找到第 2 个有楼梯的房间，从该房间上楼。如果当前房间本身就有楼梯通向上层，该房间作为第一个有楼梯的房间。</p><p>寻宝说明书的最后用红色大号字体写着：“寻宝须知：帮助你找到每层上楼房间的指示牌上的数字（即每层第一个进入的房间内指示牌上的数字）总和为打开宝箱的密钥”。</p><p>请帮助小明算出这个打开宝箱的密钥。\n</p>",
    "img": "",
    "inputTip": "第一行 2 个整数 N 和 M，之间用一个空格隔开。N 表示除了顶层外藏宝楼共 N 层楼， M 表示除顶层外每层楼有 M 个房间。 接下来 N*M 行，每行两个整数，之间用一个空格隔开，每行描述一个房间内的情况，其中第(i-1)*M+j 行表示第 i 层 j-1 号房间的情况（i=1, 2, …, N；j=1, 2, … ,M）。第一个整数表示该房间是否有楼梯通往上一层（0 表示没有，1 表示有），第二个整数表示指示牌上的数字。注意，从 j 号房间的楼梯爬到上一层到达的房间一定也是 j 号房间。 最后一行，一个整数，表示小明从藏宝楼底层的几号房间进入开始寻宝（注：房间编号从 0 开始）。对于50%数据，有 0< N ≤ 1000，0 < x ≤ 10000；对于100%数据，有 0 < N ≤ 10000，0 < M ≤ 100，0 < x ≤ 1,000,000。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出只有一行，一个整数，表示打开宝箱的密钥，这个数可能会很大，请输出对 20123 取模的结果即可。",
    "inputExample": "<pre>2 3\n1 2\n0 3\n1 4\n0 1\n1 5\n1 2\n1</pre>",
    "outputExample": "<pre>5</pre>",
    "tip": "输入输出样例说明：第一层：0 号房间，有楼梯通往上层，指示牌上的数字是 2；1 号房间，无楼梯通往上层，指示牌上的数字是 3；2 号房间，有楼梯通往上层，指示牌上的数字是 4；第二层：0 号房间，无楼梯通往上层，指示牌上的数字是 1；1 号房间，有楼梯通往上层，指示牌上的数字是 5；2 号房间，有楼梯通往上层，指示牌上的数字是 2；小明首先进入第一层（底层）的 1 号房间，记下指示牌上的数字为 3，然后从这个房间 开始，沿逆时针方向选择第 3 个有楼梯的房间 2 号房间进入，上楼后到达第二层的 2 号房间， 记下指示牌上的数字为 2，由于当前房间本身有楼梯通向上层，该房间作为第一个有楼梯的房间。因此，此时沿逆时针方向选择第 2 个有楼梯的房间即为 1 号房间，进入后上楼梯到达 顶层。这时把上述记下的指示牌上的数字加起来，即 3+2=5，所以打开宝箱的密钥就是 5。",
    "timeLimited": "2000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7924",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "07:机器翻译",
    "description": "<p>小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。</p><p>这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。</p><p>假设内存中有M个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过M−1，软件会将新单词存入一个未使用的内存单元；若内存中已存入M 个单词，软件会清空最早进入内存的那个单词，腾出单元来，存放新单词。</p><p>假设一篇英语文章的长度为N个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。\n</p>",
    "img": "",
    "inputTip": "输入文件共2行。每行中两个数之间用一个空格隔开。第一行为两个正整数M和N，代表内存容量和文章的长度。第二行为N个非负整数，按照文章的顺序，每个数（大小不超过1000）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。对于10%的数据有M = 1，N ≤ 5。对于100%的数据有0 < M ≤ 100，0 < N ≤ 1000。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "共1行，包含一个整数，为软件需要查词典的次数。",
    "inputExample": "<pre>样例 #1：\n3 7\n1 2 1 5 4 4 1\n\n样例 #2：\n2 10\n8 824 11 78 11 78 11 78 8 264</pre>",
    "outputExample": "<pre>样例 #1：\n5\n\n样例 #2：\n6</pre>",
    "tip": "输入输出样例 1 说明：整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：空：内存初始状态为空。1． 1：查找单词1并调入内存。2． 1 2：查找单词2并调入内存。3． 1 2：在内存中找到单词1。 4． 1 2 5：查找单词5并调入内存。5． 2 5 4：查找单词4并调入内存替代单词1。6． 2 5 4：在内存中找到单词4。7． 5 4 1：查找单词1并调入内存替代单词2。共计查了5 次词典。",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7925",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "08:Vigenère密码",
    "description": "<p>16世纪法国外交家Blaise de Vigenère设计了一种多表密码加密算法——Vigenère密码。Vigenère密码的加密解密算法简单易用，且破译难度比较高，曾在美国南北战争中为南军所广泛使用。</p><p>在密码学中，我们称需要加密的信息为明文，用M表示；称加密后的信息为密文，用C表示；而密钥是一种参数，是将明文转换为密文或将密文转换为明文的算法中输入的数据，记为k。 在Vigenère密码中，密钥k是一个字母串，k=k1k2…kn。当明文M=m1m2…mn时，得到的密文C=c1c2…cn，其中ci=mi®ki，运算®的规则如下表所示：</p><p style=\"text-align: center;\"><img src=\"http://media.openjudge.cn/images/upload/1423116001.png\" width=\"undefined\" height=\"undefined\"><br></p><p style=\"text-align: left;\">Vigenère加密在操作时需要注意：</p><p style=\"text-align: left;\">1. ®运算忽略参与运算的字母的大小写，并保持字母在明文M中的大小写形式；</p><p style=\"text-align: left;\">2. 当明文M的长度大于密钥k的长度时，将密钥k重复使用。</p><p style=\"text-align: left;\">例如，明文M=Helloworld，密钥k=abc时，密文C=Hfnlpyosnd。\n</p><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"792\" style=\"width: 594pt;\"><colgroup><col width=\"72\" span=\"11\" style=\"width:54pt\"></colgroup><tbody><tr height=\"25\" style=\"height:18.75pt\"><td height=\"25\" class=\"xl63\" width=\"72\" style=\"height:18.75pt;width:54pt\">明文</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">H</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">e</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">l</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">l</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">o</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">w</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">o</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">r</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">l</td><td class=\"xl64\" width=\"72\" style=\"width:54pt\">d</td></tr><tr height=\"25\" style=\"height:18.75pt\"><td height=\"25\" class=\"xl65\" style=\"height:18.75pt\">密钥</td><td class=\"xl64\">a</td><td class=\"xl64\">b</td><td class=\"xl64\">c</td><td class=\"xl64\">a</td><td class=\"xl64\">b</td><td class=\"xl64\">c</td><td class=\"xl64\">a</td><td class=\"xl64\">b</td><td class=\"xl64\">c</td><td class=\"xl64\">a</td></tr><tr height=\"25\" style=\"height:18.75pt\"><td height=\"25\" class=\"xl63\" style=\"height:18.75pt\">密文</td><td class=\"xl64\">H</td><td class=\"xl64\">f</td><td class=\"xl64\">n</td><td class=\"xl64\">l</td><td class=\"xl64\">p</td><td class=\"xl64\">y</td><td class=\"xl64\">o</td><td class=\"xl64\">s</td><td class=\"xl64\">n</td><td class=\"xl64\">d</td></tr></tbody></table><p style=\"text-align: left;\"><br></p>",
    "img": "",
    "inputTip": "输入共2行。 第一行为一个字符串，表示密钥k，长度不超过100，其中仅包含大小写字母。第二行为一个字符串，表示经加密后的密文，长度不超过1000，其中仅包含大小写字母。对于100%的数据，输入的密钥的长度不超过100，输入的密文的长度不超过1000，且都仅包含英文字母。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出共1行，一个字符串，表示输入密钥和密文所对应的明文。",
    "inputExample": "<pre>CompleteVictory\nYvqgpxaimmklongnzfwpvxmniytm</pre>",
    "outputExample": "<pre>Wherethereisawillthereisaway</pre>",
    "tip": "NOIP2012复赛 提高组 第一题",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8114",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "09:图像旋转翻转变换",
    "description": "<p>给定m行n列的图像各像素点灰度值，对其依次进行一系列操作后，求最终图像。<br></p><p>其中，可能的操作及对应字符有如下四种：</p><p>A：顺时针旋转90度；</p><p>B：逆时针旋转90度；</p><p>C：左右翻转；</p><p>D：上下翻转。</p>",
    "img": "",
    "inputTip": "第一行包含两个正整数m和n，表示图像的行数和列数，中间用单个空格隔开。1 <= m <= 100, 1 <= n <= 100。接下来m行，每行n个整数，表示图像中每个像素点的灰度值，相邻两个数之间用单个空格隔开。灰度值范围在0到255之间。接下来一行，包含由A、B、C、D组成的字符串s，表示需要按顺序执行的操作序列。s的长度在1到100之间。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "m'行，每行包含n'个整数，为最终图像各像素点的灰度值。其中m'为最终图像的行数，n'为最终图像的列数。相邻两个整数之间用单个空格隔开。",
    "inputExample": "<pre>2 3\n10 0 10\n100 100 10\nAC</pre>",
    "outputExample": "<pre>10 100\n0 100\n10 10\n</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7590",
    "category": "1.12编程基础之函数与过程抽象",
    "title": "10:素数对",
    "description": "<p>两个相差为2的素数称为素数对，如5和7，17和19等，本题目要求找出所有两个数均不大于n的素数对。<br></p>",
    "img": "",
    "inputTip": "一个正整数n。1 <= n <= 10000。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "所有小于等于n的素数对。每对素数对输出一行，中间用单个空格隔开。若没有找到任何素数对，输出empty。",
    "inputExample": "<pre>100</pre>",
    "outputExample": "<pre>3 5\n5 7\n11 13\n17 19\n29 31\n41 43\n59 61\n71 73</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  }
]