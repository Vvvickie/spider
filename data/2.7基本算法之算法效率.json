[
  {
    "id": "1757",
    "category": "2.7基本算法之算法效率",
    "title": "1757:神奇的口袋",
    "description": "有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a<sub>1</sub>，a<sub>2</sub>……a<sub>n</sub>。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。",
    "img": "",
    "inputTip": "输入的第一行是正整数n (1 <= n <= 20)，表示不同的物品的数目。接下来的n行，每行有一个1到40之间的正整数，分别给出a1，a2……an的值。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出不同的选择物品的方式的数目。",
    "inputExample": "<pre>3\n20\n20\n20\n</pre>",
    "outputExample": "<pre>3</pre>",
    "tip": "",
    "timeLimited": "10000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "1761",
    "category": "2.7基本算法之算法效率",
    "title": "1761:神奇的口袋(2)",
    "description": "有一个神奇的口袋，总的容积是400，用这个口袋可以变出一些物品，这些物品的总体积必须是400。John现在有n个想要得到的物品，每个物品的体积分别是a<sub>1</sub>，a<sub>2</sub>……a<sub>n</sub>。John可以从这些物品中选择一些，如果选出的物体的总体积是400，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。",
    "img": "",
    "inputTip": "输入的第一行是正整数n (1 <= n <= 200)，表示不同的物品的数目。接下来的n行，每行有一个1到400之间的正整数，分别给出a1，a2……an的值。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出不同的选择物品的方式的数目对10000取模的结果（因为结果可能很大，为了避免高精度计算，只要求对10000取模的结果）。",
    "inputExample": "<pre>3\n200\n200\n200\n</pre>",
    "outputExample": "<pre>3</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "2393",
    "category": "2.7基本算法之算法效率",
    "title": "2393:Going to the Movies",
    "description": "Farmer John is taking some of his cows to the movies! While his truck has a limited capacity of C (100 <= C <= 5000) kilograms, he wants to take the cows that, in aggregate, weigh as much as possible without exceeding the limit C.<br> <br>Given N (1 <= N <= 16) cows and their respective weights W_i, determine the weight of the heaviest group of cows that FJ can take to the movies.<br>",
    "img": "",
    "inputTip": "* Line 1: Two space-separated integers: C and N* Lines 2..N+1: Line i+1 contains a single integer: W_i",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "* Line 1: A single integer that is the weight of the heaviest group of cows that can go to the movies",
    "inputExample": "<pre>259 5\n81\n58\n42\n33\n61\n</pre>",
    "outputExample": "<pre>242\n</pre>",
    "tip": "81+58+42+61 = 242;this is the best possible sum",
    "timeLimited": "10000ms",
    "spaceLimited": "1000ms"
  },
  {
    "id": "2987",
    "category": "2.7基本算法之算法效率",
    "title": "2987:小兔子捡金币",
    "description": "在一个游戏中，小兔子可以捡金币。它会一边走一边捡掉经过的金币。当小兔子发现前方没有金币的时候，会自动右转。直到所有金币都被捡走。现在把一个NХN的方型区域内，每一格都摆方好了金币。假设小兔子从左上方第一格开始，往右边走。图示如下：<br><code><br> 1     2     3     4<br>12    13    14     5<br>11    16    15     6<br>10     9     8     7<br></code><br>捡到的第k个金币会被标记成k，记为该金币的序号。则问第i行，第j列的金币是的序号是什么？ （1≤i≤N, 1≤j≤N）",
    "img": "",
    "inputTip": "第一行有一个整数K和N, N表示方型区域的大小（1≤N≤10000），而K表示输入坐标的组数。（1≤K≤25）接下来会有K行，每一行有两上个用空格分隔的整数i和j，表示待求金币的行数和列数。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "一共输出K行。每一行输出一个对应坐标下金币的序号。",
    "inputExample": "<pre>3 4\n1 3\n2 2\n3 3\n</pre>",
    "outputExample": "<pre>3\n13\n15\n</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "413",
    "category": "2.7基本算法之算法效率",
    "title": "413:Calling Extraterrestrial Intelligence Again",
    "description": "A message from humans to extraterrestrial intelligence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November 16, 1974. The message consisted of 1679 bits and was meant to be translated to a rectangular picture with 23 x 73 pixels. Since both 23 and 73 are prime numbers, 23 x 73 is the unique possible size of the translated rectangular picture each edge of which is longer than 1 pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic.<br><br>We are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term \"most suitable\" is defined as follows. An integer m greater than 4 is given. A positive fraction a/b less than or equal to 1 is also given. The area of the picture should not be greater than m. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than a/b nor greater than 1. You should maximize the area of the picture under these constraints.<br><br>In other words, you will receive an integer m and a fraction a/b. It holds that m > 4 and 0 < a/b <= 1. You should find the pair of prime numbers p, q such that pq <= m and a/b <= p/q <= 1, and furthermore, the product pq takes the maximum value among such pairs of two prime numbers. You should report p and q as the \"most suitable\" width and height of the translated picture.<br>",
    "img": "",
    "inputTip": "The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicates the end of the input and should not be treated as data to be processed.The integers of each input triplet are the integer m, the numerator a, and the denominator b described above, in this order. You may assume 4 < m <= 100000 and 1 <= a <= b <= 1000.",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "The output is a sequence of pairs of positive integers. The i-th output pair corresponds to the i-th input triplet. The integers of each output pair are the width p and the height q described above, in this order.Each output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output.",
    "inputExample": "<pre>5 1 2\n99999 999 999\n1680 5 16\n1970 1 1\n2002 4 11\n0 0 0</pre>",
    "outputExample": "<pre>2 2\n313 313\n23 73\n43 43\n37 53</pre>",
    "tip": "Japan 2002 Kanazawa",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "4366",
    "category": "2.7基本算法之算法效率",
    "title": "4366:选择客栈",
    "description": "<p>丽江河边有 n 家很有特色的客栈，客栈按照其位置顺序从 1 到n 编号。每家客栈都按照某一种色调进行装饰（总共 k 种，用整数 0 ~ k-1 表示） ，且每家客栈都设有一家咖啡店，每家咖啡店均有各自的最低消费。 <br>两位游客一起去丽江旅游，他们喜欢相同的色调，又想尝试两个不同的客栈，因此决定分别住在色调相同的两家客栈中。晚上，他们打算选择一家咖啡店喝咖啡，要求咖啡店位于两人住的两家客栈之间（包括他们住的客栈） ，且咖啡店的最低消费不超过 p。 <br>他们想知道总共有多少种选择住宿的方案，保证晚上可以找到一家最低消费不超过 p 元的咖啡店小聚。</p>",
    "img": "",
    "inputTip": "第一行三个整数 n，k，p，每两个整数之间用一个空格隔开，分别表示客栈的个数，色调的数目和能接受的最低消费的最高值； 接下来的 n行，第 i+1 行两个整数，之间用一个空格隔开，分别表示 i 号客栈的装饰色调和 i 号客栈的咖啡店的最低消费。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出只有一行，一个整数，表示可选的住宿方案的总数。",
    "inputExample": "<pre>5 2 3 \n0 5 \n1 3 \n0 2 \n1 4 \n1 5 </pre>",
    "outputExample": "<pre>3 </pre>",
    "tip": "2 人要住同样色调的客栈，所有可选的住宿方案包括：住客栈①③，②④，②⑤，④⑤，但是若选择住 4、5 号客栈的话，4、5 号客栈之间的咖啡店的最低消费是 4，而两人能承受的最低消费是 3 元，所以不满足要求。因此只有前 3 种方案可选。  【数据范围】 对于 30%的数据，有 n ≤ 100； 对于 50%的数据，有 n ≤ 1,000； 对于 100%的数据，有 2 ≤ n≤ 200,000，0 < k ≤ 50，0 ≤ p ≤ 100， 0 ≤ 最低消费 ≤ 100。",
    "timeLimited": "1000ms",
    "spaceLimited": "65535kB"
  },
  {
    "id": "4976",
    "category": "2.7基本算法之算法效率",
    "title": "4976:硬币",
    "description": "<p style=\"margin-bottom: 0in\"><span style=\"font-family:DejaVu Sans;font-family:宋体\">宇航员</span><span style=\"font-family:宋体, serif\">Bob</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">有一天来到火星上，他有收集硬币的习惯。于是他将火星上所有面值的硬币都收集起来了，一共有</span><span style=\"font-family:宋体, serif\">n</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">种，每种只有一个：面值分别为</span><span style=\"font-family:宋体, serif\">a</span><sub><span style=\"font-family:宋体, serif\">1</span></sub><span style=\"font-family:宋体, serif\">,a</span><sub><span style=\"font-family:宋体, serif\">2</span></sub><span style=\"font-family:宋体, serif\">… a</span><sub><span style=\"font-family:宋体, serif\">n</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">。\n</span></sub><span style=\"font-family:宋体, serif\">Bob</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">在机场看到了一个特别喜欢的礼物，想买来送给朋友</span><span style=\"font-family:宋体, serif\">Alice</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">，这个礼物的价格是</span><span style=\"font-family:宋体, serif\">X</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">元。</span><span style=\"font-family:宋体, serif\">Bob</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">很想知道为了买这个礼物他的哪些硬币是必须被使用的，即</span><span style=\"font-family:宋体, serif\">Bob</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">必须放弃收集好的哪些硬币种类。飞机场不提供找零，只接受恰好</span><span style=\"font-family:宋体, serif\">X</span><span style=\"font-family:DejaVu Sans;font-family:宋体\">元<span style=\"font-family:DejaVu Sans;font-family:宋体\">。</span></span></p>",
    "img": "",
    "inputTip": "第一行包含两个正整数n和x。（1 <= n <= 200, 1 <= x <= 10000)第二行从小到大为n个正整数a1, a2, a3 … an  （1 <= ai <= x)",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "第一行是一个整数，即有多少种硬币是必须被使用的。第二行是这些必须使用的硬币的面值（从小到大排列）。",
    "inputExample": "<pre>5 18\n1 2 3 5 10</pre>",
    "outputExample": "<pre>2\n5 10</pre>",
    "tip": "输入数据将保证给定面值的硬币中至少有一种组合能恰好能够支付X元。如果不存在必须被使用的硬币，则第一行输出0，第二行输出空行。",
    "timeLimited": "1000ms",
    "spaceLimited": "262144kB"
  },
  {
    "id": "7215",
    "category": "2.7基本算法之算法效率",
    "title": "7215:简单的整数划分问题",
    "description": "<p class=\"MsoNormal\"><span style=\"font-family:宋体\">将正整数</span><span>n </span><span style=\"font-family:宋体\">表示成一系列正整数之和，</span><span>n=n1+n2+…+nk, </span><span style=\"font-family:宋体\">其中</span><span>n1>=n2>=…>=nk>=1 </span><span style=\"font-family:宋体\">，</span><span>k>=1 </span><span style=\"font-family:宋体\">。</span><span><br></span><span style=\"font-family:宋体\">正整数</span><span>n </span><span style=\"font-family:宋体\">的这种表示称为正整数</span><span>n </span><span style=\"font-family:宋体\">的划分。正整数</span><span>n </span><span style=\"font-family:宋体\">的不同的划分个数称为正整数</span><span>n </span><span style=\"font-family:宋体\">的划分数。</span></p>",
    "img": "",
    "inputTip": "标准的输入包含若干组测试数据。每组测试数据是一个整数N(0 < N <= 50)。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "对于每组测试数据，输出N的划分数。",
    "inputExample": "<pre>5</pre>",
    "outputExample": "<pre>7</pre>",
    "tip": "5, 4+1, 3+2, 3+1+1, 2+2+1, 2+1+1+1, 1+1+1+1+1",
    "timeLimited": "100ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7219",
    "category": "2.7基本算法之算法效率",
    "title": "7219:复杂的整数划分问题",
    "description": "<p><span style=\"font-size:10.5pt;font-family:宋体\">将正整数</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">n </span><span style=\"font-size:10.5pt;font-family:宋体\">表示成一系列正整数之和，</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">n=n1+n2+…+nk, </span><span style=\"font-size:10.5pt;font-family:宋体\">其中</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">n1>=n2>=…>=nk>=1 </span><span style=\"font-size:10.5pt;font-family:宋体\">，</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">k>=1 </span><span style=\"font-size:10.5pt;font-family:宋体\">。</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\"><br></span><span style=\"font-size:10.5pt;font-family:宋体\">正整数</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">n </span><span style=\"font-size:10.5pt;font-family:宋体\">的这种表示称为正整数</span><span style=\"font-size:10.5pt;font-family:'Calibri','sans-serif'\">n </span><span style=\"font-size:10.5pt;font-family:宋体\">的划分。</span><br></p>",
    "img": "",
    "inputTip": "标准的输入包含若干组测试数据。每组测试数据是一行输入数据,包括两个整数N 和 K。 (0 < N <= 50, 0 < K <= N)",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "对于每组测试数据，输出以下三行数据:第一行:  N划分成K个正整数之和的划分数目第二行:  N划分成若干个不同正整数之和的划分数目第三行:  N划分成若干个奇正整数之和的划分数目",
    "inputExample": "<pre>5 2</pre>",
    "outputExample": "<pre>2\n3\n3</pre>",
    "tip": "第一行: 4+1, 3+2,第二行: 5，4+1，3+2第三行: 5，1+1+3， 1+1+1+1+1+1",
    "timeLimited": "200ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8756",
    "category": "2.7基本算法之算法效率",
    "title": "8756:砝码称重V2",
    "description": "<p><span style=\"color: rgb(35, 31, 23);font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif;font-size: 14px\">设有1g、2g、3g、5g、10g、20g的砝码各若干枚（其总重<=100,000），要求：计算<span style=\"color: rgb(35, 31, 23);font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif;font-size: 14px\">用这些砝码能称出的不同重量的个数，但不包括一个砝码也不用的情况。</span><br><!--=100,000），要求：计算<--></span></p>",
    "img": "",
    "inputTip": "一行，包括六个正整数a1,a2,a3,a4,a5,a6，表示1g砝码有a1个，2g砝码有a2个，……，20g砝码有a6个。相邻两个整数之间用单个空格隔开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "以“Total=N”的形式输出，其中N为可以称出的不同重量的个数。",
    "inputExample": "<pre>1 1 0 0 0 0</pre>",
    "outputExample": "<pre>Total=3</pre>",
    "tip": "样例给出的砝码可以称出1g，2g，3g三种不同的重量。",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8784",
    "category": "2.7基本算法之算法效率",
    "title": "8784:最大公约数和最小公倍数问题",
    "description": "<p>输入二个正整数x0,y0(2<=x0<100000,2<=y0<=1000000),求出满足下列条件的p,q的个数：< p=\"\"></p><p>条件:</p><p>1.P,A是正整数</p><p>2.要求P,Q以x0为最大公约数,以y0为最小公倍数。</p><p>试求:满足条件的所有可能的两个正整数的个数。</p><!--=x0<100000,2<=y0<=1000000),求出满足下列条件的p,q的个数：<--><p></p>",
    "img": "",
    "inputTip": "一行，包含两个正整数x0和y0，中间用单个空格隔开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "一个整数，即满足条件的个数。",
    "inputExample": "<pre>3 60</pre>",
    "outputExample": "<pre>4</pre>",
    "tip": "此时的P  Q分别为:3   6015  1212  1560  3所以:满足条件的所有可能的两个正整数的个数共4种。",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "9269",
    "category": "2.7基本算法之算法效率",
    "title": "9269:Big String超级字符串",
    "description": "<p><span style=\"font-size: medium;\">fish在无数次oi竞赛的狱炼之后，悟出一个真理，往往越容易的题目，陷阱越深。由此，fish创作了这道题目。 <br>\nfish首先给出两个短串A=’4567’ (4个字符)， B=’123’(3个字符)。反复进行如下的操作得到一个长串C。 <br>\n（１）C=B+A (例如：A=’4567’ ,B=’123’ C=B+A=’1234567’) <br>\n（２）A=B B=C (上述例子 A=’123’ B=’1234567’) <br>\n请你编程找出这个长串的第n个字符。 <br>\n</span></p>",
    "img": "",
    "inputTip": "第一行包含一个整数 n (1<=n<=10^9) ",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "仅一行，包含一个字符，表示这个长串的第n个字符。 ",
    "inputExample": "<pre>9</pre>",
    "outputExample": "<pre>2</pre>",
    "tip": "",
    "timeLimited": "10000ms",
    "spaceLimited": "1000ms"
  }
]