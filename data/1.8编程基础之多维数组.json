[
  {
    "id": "7741",
    "category": "1.8编程基础之多维数组",
    "title": "01:矩阵交换行",
    "description": "<dl><dd style=\"margin: 0px; padding: 0px; color: rgb(35, 31, 23); font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;\"><p>给定一个5*5的矩阵（<span style=\"color: rgb(35, 31, 23);font-size: 14px\">数学上，一个r×c的矩阵是一个由r行c列元素排列成的矩形阵列</span>），将第n行和第m行交换，输出交换后的结果。</p></dd></dl>",
    "img": "",
    "inputTip": "输入共6行，前5行为矩阵的每一行元素,元素与元素之间以一个空格分开。第6行包含两个整数m、n，以一个空格分开。（1 <= m,n <= 5）",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出交换之后的矩阵，矩阵的每一行元素占一行，元素之间以一个空格分开。",
    "inputExample": "<pre>1 2 2 1 2\n5 6 7 8 3\n9 3 0 5 3\n7 2 1 4 6\n3 0 8 2 4\n1 5</pre>",
    "outputExample": "<pre>3 0 8 2 4\n5 6 7 8 3\n9 3 0 5 3\n7 2 1 4 6\n1 2 2 1 2</pre>",
    "tip": "1901",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7889",
    "category": "1.8编程基础之多维数组",
    "title": "02:同行列对角线的格子",
    "description": "<p class=\"MsoNormal\">输入三个自然数<span>N</span>，<span>i</span>，<span>j </span>（<span>1<=i<=N，<span>1<=j<=N），输出在一个<span>N*N<!--=j<=n），输出在一个<span--><!--=i<=n，<span--></span>格的棋盘中（行列均从1开始编号），与格子（<span>i</span>，<span>j</span>）同行、同列、同一对角线的所有格子的位置。</span></span></p><p class=\"MsoNormal\">如：<span>n=4</span>，<span>i=2</span>，<span>j=3</span>表示了棋盘中的第二行第三列的格子，如下图：</p><table class=\"MsoNormalTable\" style=\"border: currentColor; border-image: none; margin-left: 75.15pt;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr style=\"height: 21.75pt;\"><td width=\"64\" style=\"border-width: medium medium 1pt; border-style: none none solid; border-color: currentColor currentColor windowtext; padding: 0cm 5.4pt; border-image: none; width: 48pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第一列</span></p></td><td width=\"63\" style=\"border-width: medium medium 1pt; border-style: none none solid; border-color: currentColor currentColor windowtext; padding: 0cm 5.4pt; border-image: none; width: 47.25pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第二列</span></p></td><td width=\"57\" style=\"border-width: medium medium 1pt; border-style: none none solid; border-color: currentColor currentColor windowtext; padding: 0cm 5.4pt; border-image: none; width: 42.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第三列</span></p></td><td width=\"65\" style=\"border-width: medium medium 1pt; border-style: none none solid; border-color: currentColor currentColor windowtext; padding: 0cm 5.4pt; border-image: none; width: 48.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第四列</span></p></td><td width=\"65\" style=\"padding: 0cm 5.4pt; border: currentColor; border-image: none; width: 48.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td></tr><tr style=\"height: 21.75pt;\"><td width=\"64\" style=\"border-width: medium 1pt 1pt; border-style: none solid solid; border-color: currentColor windowtext windowtext; padding: 0cm 5.4pt; border-image: none; width: 48pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"63\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 47.25pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"57\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 42.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 48.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"padding: 0cm 5.4pt; border: currentColor; border-image: none; width: 48.75pt; height: 21.75pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第一行</span></p></td></tr><tr style=\"height: 22.5pt;\"><td width=\"64\" style=\"border-width: medium 1pt 1pt; border-style: none solid solid; border-color: currentColor windowtext windowtext; padding: 0cm 5.4pt; border-image: none; width: 48pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"63\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 47.25pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"57\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 42.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\">(2,3)</span></p></td><td width=\"65\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"padding: 0cm 5.4pt; border: currentColor; border-image: none; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第二行</span></p></td></tr><tr style=\"height: 22.5pt;\"><td width=\"64\" style=\"border-width: medium 1pt 1pt; border-style: none solid solid; border-color: currentColor windowtext windowtext; padding: 0cm 5.4pt; border-image: none; width: 48pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"63\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 47.25pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"57\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 42.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"padding: 0cm 5.4pt; border: currentColor; border-image: none; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第三行</span></p></td></tr><tr style=\"height: 22.5pt;\"><td width=\"64\" style=\"border-width: medium 1pt 1pt; border-style: none solid solid; border-color: currentColor windowtext windowtext; padding: 0cm 5.4pt; border-image: none; width: 48pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"63\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 47.25pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"57\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 42.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"border-width: medium 1pt 1pt medium; border-style: none solid solid none; border-color: currentColor windowtext windowtext currentColor; padding: 0cm 5.4pt; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-family:;\" new=\"\" times=\"\"> </span></p></td><td width=\"65\" style=\"padding: 0cm 5.4pt; border: currentColor; border-image: none; width: 48.75pt; height: 22.5pt;\"><p class=\"MsoNormal\" style=\"text-align: center;\"><span style=\"font-size: 10.5pt\">第四行</span></p></td></tr></tbody></table><p class=\"MsoNormal\" style=\"margin-left: 20.7pt;\"><span style=\"font-family:;\" new=\"\" times=\"\">    </span></p><p class=\"MsoNormal\">当<span>n=4</span>，<span>i=2</span>，<span>j=3</span>时，输出的结果是：</p><p class=\"MsoNormal\"><span> (2,1) (2,2) (2,3) (2,4)                        </span>同一行上格子的位置</p><p class=\"MsoNormal\"><span> (1,3) (2,3) (3,3) (4,3)                        </span>同一列上格子的位置</p><p class=\"MsoNormal\"><span> (1,2) (2,3) (3,4)                              </span>左上到右下对角线上的格子的位置</p><p class=\"MsoNormal\"><span> (4,1) (3,2) (2,3) (1,4)                        </span>左下到右上对角线上的格子的位置</p><p><br></p>",
    "img": "",
    "inputTip": "一行，三个自然数N，i，j，相邻两个数之间用单个空格隔开。1 <= N <= 10。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "四行：第一行：从左到右输出同一行格子位置；第二行：从上到下输出同一列格子位置；第三行：从左上到右下输出同一对角线格子位置；第四行：从左下到右上输出同一对角线格子位置。其中每个格子位置用如下格式输出：(x,y)，x为行号，y为列号，采用英文标点，中间无空格。相邻两个格子位置之间用单个空格隔开。",
    "inputExample": "<pre>4 2 3</pre>",
    "outputExample": "<pre>(2,1) (2,2) (2,3) (2,4)\n(1,3) (2,3) (3,3) (4,3)\n(1,2) (2,3) (3,4)\n(4,1) (3,2) (2,3) (1,4)</pre>",
    "tip": "NOIP1996复赛 普及组 第二题",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7743",
    "category": "1.8编程基础之多维数组",
    "title": "03:计算矩阵边缘元素之和",
    "description": "<dl><dd style=\"margin: 0px; padding: 0px; color: rgb(35, 31, 23); font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;\"><p style=\"margin-top: 15px; margin-bottom: 15px; padding: 0px;\">输入一个整数矩阵，计算位于矩阵边缘的元素之和。所谓矩阵边缘的元素，就是第一行和最后一行的元素以及第一列和最后一列的元素。</p></dd></dl>",
    "img": "",
    "inputTip": "第一行分别为矩阵的行数m和列数n（m < 100，n < 100），两者之间以一个空格分开。接下来输入的m行数据中，每行包含n个整数，整数之间以一个空格分开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出对应矩阵的边缘元素和",
    "inputExample": "<pre>3 3\n3 4 1\n3 7 1\n2 0 1</pre>",
    "outputExample": "<pre>15</pre>",
    "tip": "6375",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7742",
    "category": "1.8编程基础之多维数组",
    "title": "04:错误探测",
    "description": "<p><span style=\"color: rgb(35, 31, 23);font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif;font-size: 14px\">给定n*n由0和1组成的矩阵，如果矩阵的每一行和每一列的1的数量都是偶数，则认为符合条件。 </span><br style=\"color: rgb(35, 31, 23); font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;\"><span style=\"color: rgb(35, 31, 23);font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif;font-size: 14px\">你的任务就是检测矩阵是否符合条件，或者在仅改变一个矩阵元素的情况下能否符合条件。 </span><br style=\"color: rgb(35, 31, 23); font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;\"><span style=\"color: rgb(35, 31, 23);font-family: 'Lucida Grande', Verdana, 'Bitstream Vera Sans', Arial, sans-serif;font-size: 14px\">\"改变矩阵元素\"的操作定义为0变成1或者1变成0。</span><br></p>",
    "img": "",
    "inputTip": "输入n + 1行，第1行为矩阵的大小n(0 < n < 100)，以下n行为矩阵的每一行的元素，元素之间以一个空格分开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "如果矩阵符合条件，则输出OK；如果矩阵仅改变一个矩阵元素就能符合条件，则输出需要改变的元素所在的行号和列号，以一个空格分开。如果不符合以上两条，输出Corrupt。",
    "inputExample": "<pre>样例输入1\n4\n1 0 1 0\n0 0 0 0\n1 1 1 1\n0 1 0 1\n\n样例输入2\n4\n1 0 1 0\n0 0 1 0\n1 1 1 1\n0 1 0 1\n\n样例输入3\n4\n1 0 1 0\n0 1 1 0\n1 1 1 1\n0 1 0 1</pre>",
    "outputExample": "<pre>样例输出1\nOK\n\n样例输出2\n2 3\n\n样例输出3\nCorrupt</pre>",
    "tip": "6423",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "2671",
    "category": "1.8编程基础之多维数组",
    "title": "05:计算鞍点",
    "description": "<p>给定一个5*5的矩阵，每行只有一个最大值，每列只有一个最小值，寻找这个矩阵的鞍点。<br>鞍点指的是矩阵中的一个元素，它是所在行的最大值，并且是所在列的最小值。<br>例如：在下面的例子中（第4行第1列的元素就是鞍点，值为8 ）。<br>11 3 5 6 9<br>12 4 7 8 10<br>10 5 6 9 11<br>8  6 4 7 2<br>15 10 11 20 25<br></p>",
    "img": "",
    "inputTip": "输入包含一个5行5列的矩阵",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "如果存在鞍点，输出鞍点所在的行、列及其值，如果不存在，输出\"not found\"",
    "inputExample": "<pre>11 3 5 6 9\n12 4 7 8 10\n10 5 6 9 11\n8  6 4 7 2\n15 10 11 20 25</pre>",
    "outputExample": "<pre>4 1 8</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8101",
    "category": "1.8编程基础之多维数组",
    "title": "06:图像相似度",
    "description": "<p>给出两幅相同大小的黑白图像（用0-1矩阵）表示，求它们的相似度。</p><p>说明：若两幅图像在相同位置上的像素点颜色相同，则称它们在该位置具有相同的像素点。两幅图像的相似度定义为相同像素点数占总像素点数的百分比。</p>",
    "img": "",
    "inputTip": "第一行包含两个整数m和n，表示图像的行数和列数，中间用单个空格隔开。1 <= m <= 100, 1 <= n <= 100。之后m行，每行n个整数0或1，表示第一幅黑白图像上各像素点的颜色。相邻两个数之间用单个空格隔开。之后m行，每行n个整数0或1，表示第二幅黑白图像上各像素点的颜色。相邻两个数之间用单个空格隔开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "一个实数，表示相似度（以百分比的形式给出），精确到小数点后两位。",
    "inputExample": "<pre>3 3\n1 0 1\n0 0 1\n1 1 0\n1 1 0\n0 0 1\n0 0 1\n</pre>",
    "outputExample": "<pre>44.44</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "6245",
    "category": "1.8编程基础之多维数组",
    "title": "07:矩阵归零消减序列和",
    "description": "<p>给定一个n*n的矩阵（3 <= n <= 100，元素的值都是非负整数）。通过(n-1)次实施下述过程，可把这个矩阵转换成一个1*1的矩阵。每次的过程如下：</p><p>首先对矩阵进行行归零：即对每一行上的所有元素，都在其原来值的基础上减去该行上的最小值，保证相减后的值仍然是非负整数，且这一行上至少有一个元素的值为0。</p><p>接着对矩阵进行列归零：即对每一列上的所有元素，都在其原来值的基础上减去该列上的最小值，保证相减后的值仍然是非负整数，且这一列上至少有一个元素的值为0。</p><p>然后对矩阵进行消减：即把n*n矩阵的第二行和第二列删除，使之转换为一个(n-1)*(n-1)的矩阵。</p><p>下一次过程，对生成的(n-1)*(n-1)矩阵实施上述过程。显然，经过(n-1)次上述过程， n*n的矩阵会被转换为一个1*1的矩阵。</p><p>请求出每次消减前位于第二行第二列的元素的值。</p><p><br><br></p>",
    "img": "",
    "inputTip": "第一行是一个整数n。接下来n行，每行有n个正整数，描述了整个矩阵。相邻两个整数间用单个空格分隔。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出为n行，每行上的整数为对应矩阵归零消减过程中，每次消减前位于第二行第二列的元素的值。",
    "inputExample": "<pre>3\n1 2 3\n2 3 4\n3 4 5\n</pre>",
    "outputExample": "<pre>3\n0\n0\n</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8066",
    "category": "1.8编程基础之多维数组",
    "title": "08:矩阵加法",
    "description": "<p><span style=\"white-space: normal;\">输入两个n行m列的矩阵A和B，输出它们的和A+B</span><span style=\"white-space: normal;\">。</span><br></p>",
    "img": "",
    "inputTip": "第一行包含两个整数n和m，表示矩阵的行数和列数。1 <= n <= 100，1 <= m <= 100。接下来n行，每行m个整数，表示矩阵A的元素。接下来n行，每行m个整数，表示矩阵B的元素。相邻两个整数之间用单个空格隔开，每个元素均在1~1000之间。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "n行，每行m个整数，表示矩阵加法的结果。相邻两个整数之间用单个空格隔开。",
    "inputExample": "<pre>3 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n4 5 6\n7 8 9</pre>",
    "outputExample": "<pre>2 4 6\n5 7 9\n8 10 12\n</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7544",
    "category": "1.8编程基础之多维数组",
    "title": "09:矩阵乘法",
    "description": "<p>计算两个矩阵的乘法。n*m阶的矩阵A乘以m*k阶的矩阵B得到的矩阵C\n是n*k阶的，且C[i][j] = A[i][0]*B[0][j] + A[i][1]*B[1][j] + …… \n+A[i][m-1]*B[m-1][j](C[i][j]表示C矩阵中第i行第j列元素)。<br></p>",
    "img": "",
    "inputTip": "第一行为n, m, k，表示A矩阵是n行m列，B矩阵是m行k列，n, m, k均小于100然后先后输入A和B两个矩阵，A矩阵n行m列，B矩阵m行k列，矩阵中每个元素的绝对值不会大于1000。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出矩阵C，一共n行，每行k个整数，整数之间以一个空格分开。",
    "inputExample": "<pre>3 2 3\n1 1\n1 1\n1 1\n1 1 1\n1 1 1</pre>",
    "outputExample": "<pre>2 2 2\n2 2 2\n2 2 2</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8064",
    "category": "1.8编程基础之多维数组",
    "title": "10:矩阵转置",
    "description": "<p>输入一个n行m列的矩阵A，输出它的转置A<sup>T</sup>。<br></p>",
    "img": "",
    "inputTip": "第一行包含两个整数n和m，表示矩阵A的行数和列数。1 <= n <= 100，1 <= m <= 100。接下来n行，每行m个整数，表示矩阵A的元素。相邻两个整数之间用单个空格隔开，每个元素均在1~1000之间。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "m行，每行n个整数，为矩阵A的转置。相邻两个整数之间用单个空格隔开。",
    "inputExample": "<pre>3 3\n1 2 3\n4 5 6\n7 8 9\n</pre>",
    "outputExample": "<pre>1 4 7\n2 5 8\n3 6 9</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8065",
    "category": "1.8编程基础之多维数组",
    "title": "11:图像旋转",
    "description": "<p><span style=\"white-space: normal;\">输入一个n行m列的黑白图像，将它顺时针旋转90度后输出。</span><br></p>",
    "img": "",
    "inputTip": "第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 <= n <= 100，1 <= m <= 100。接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "m行，每行n个整数，为顺时针旋转90度后的图像。相邻两个整数之间用单个空格隔开。",
    "inputExample": "<pre>3 3\n1 2 3\n4 5 6\n7 8 9</pre>",
    "outputExample": "<pre>7 4 1\n8 5 2\n9 6 3</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "6683",
    "category": "1.8编程基础之多维数组",
    "title": "12:变幻的矩阵",
    "description": "<p>有一个N x N（N为奇数，且1 <= N <= 10）的矩阵，矩阵中的元素都是字符。这个矩阵可能会按照如下的几种变幻法则之一进行变幻（只会变幻一次）。\n<br><br>现在给出一个原始的矩阵，和一个变幻后的矩阵，请编写一个程序，来判定原始矩阵是按照哪一种法则变幻为目标矩阵的。\n<br><br>1. 按照顺时针方向旋转90度；\n<br>如： \n<br></p><pre>1 2 3        7 4 1\n4 5 6 变幻为  8 5 2\n7 8 9        9 6 3\n</pre><br>2. 按照逆时针方向旋转90度；\n<br>如：\n<pre>1 2 3        3 6 9\n4 5 6 变幻为  2 5 8\n7 8 9        1 4 7 \n</pre><br>3. 中央元素不变（如下例中的 5），其他元素（如下例中的3）与“以中央元素为中心的对应元素”（如下例中的7）互换；\n<br>如：\n<pre>1 2 3       9 8 7\n4 5 6 变幻为 6 5 4\n7 8 9       3 2 1 \n</pre><br>4. 保持原始矩阵，不变幻；\n<br><br>5. 如果 从原始矩阵 到 目标矩阵 的变幻，不符合任何上述变幻，请输出5<br><p></p>",
    "img": "",
    "inputTip": "第一行：矩阵每行/列元素的个数 N；第二行到第N+1行：原始矩阵，共N行，每行N个字符；第N+2行到第2*N+1行：目标矩阵，共N行，每行N个字符；",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "只有一行，从原始矩阵 到 目标矩阵 的所采取的 变幻法则的编号。",
    "inputExample": "<pre>5\na b c d e\nf g h i j\nk l m n o\np q r s t\nu v w x y\ny x w v u\nt s r q p\no n m l k\nj i h g f\ne d c b a</pre>",
    "outputExample": "<pre>3</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8167",
    "category": "1.8编程基础之多维数组",
    "title": "13:图像模糊处理",
    "description": "<p>给定n行m列的图像各像素点的灰度值，要求用如下方法对其进行模糊化处理：<br></p><p>1. 四周最外侧的像素点灰度值不变；</p><p>2. 中间各像素点新灰度值为该像素点及其上下左右相邻四个像素点原灰度值的平均（舍入到最接近的整数）。</p>",
    "img": "",
    "inputTip": "第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 <= n <= 100，1 <= m <= 100。接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "n行，每行m个整数，为模糊处理后的图像。相邻两个整数之间用单个空格隔开。",
    "inputExample": "<pre>4 5\n100 0 100 0 50\n50 100 200 0 0\n50 50 100 100 200\n100 100 50 50 100</pre>",
    "outputExample": "<pre>100 0 100 0 50\n50 80 100 60 0\n50 80 100 90 200\n100 100 50 50 100</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8067",
    "category": "1.8编程基础之多维数组",
    "title": "14:扫雷游戏地雷数计算",
    "description": "<p>扫雷游戏是一款十分经典的单机小游戏。它的精髓在于，通过已翻开格子所提示的周围格地雷数，来判断未翻开格子里是否是地雷。</p><p>现在给出n行m列的雷区中的地雷分布，要求计算出每个非地雷格的周围格地雷数。</p><p>注：每个格子周围格有八个：上、下、左、右、左上、右上、左下、右下。</p>",
    "img": "",
    "inputTip": "第一行包含两个整数n和m，分别表示雷区的行数和列数。1 <= n <= 100, 1 <= m <= 100。接下来n行，每行m个字符，‘*’表示相应格子中是地雷，‘？’表示相应格子中无地雷。字符之间无任何分隔符。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "n行，每行m个字符，描述整个雷区。若相应格中是地雷，则用‘*’表示，否则用相应的周围格地雷数表示。字符之间无任何分隔符。",
    "inputExample": "<pre>3 3\n*??\n???\n?*?</pre>",
    "outputExample": "<pre>*10\n221\n1*1</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8215",
    "category": "1.8编程基础之多维数组",
    "title": "15:细菌的繁殖与扩散",
    "description": "<p><span style=\"font-family: 'Times New Roman';font-size: 14.6666669845581px;background-color: rgb(255, 255, 255)\">在边长为9的正方形培养皿中，正中心位置有m个细菌。假设细菌的寿命仅一天，但每天可繁殖10个后代，而且这10个后代，有两个分布在原来的单元格中，其余的均匀分布在其四周相邻的八个单元格中。求经过n(1≤n≤4)天后，细菌在培养皿中的分布情况。</span><br></p>",
    "img": "",
    "inputTip": "输入为两个整数，第一个整数m表示中心位置细菌的个数（2 ≤ m ≤ 30），第二个整数n表示经过的天数（1 ≤ n ≤ 4）。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出九行九列整数矩阵，每行的整数之间用空格分隔。整个矩阵代表n天后细菌在培养皿上的分布情况。",
    "inputExample": "<pre>2 1</pre>",
    "outputExample": "<pre>0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 2 2 2 0 0 0\n0 0 0 2 4 2 0 0 0\n0 0 0 2 2 2 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0</pre>",
    "tip": "北大医学部07计算概论模拟考试1",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "1341",
    "category": "1.8编程基础之多维数组",
    "title": "16:矩阵剪刀石头布",
    "description": "<p>Bart的妹妹Lisa在一个二维矩阵上创造了新的文明。矩阵上每个位置被三种生命形式之一占据：石头，剪刀，布。每天，上下左右相邻的不同生命形式将会发生战斗。在战斗中，石头永远胜剪刀，剪刀永远胜布，布永远胜石头。每一天结束之后，败者的领地将被胜者占领。</p><p>你的工作是计算出n天之后矩阵的占据情况。</p>",
    "img": "",
    "inputTip": "第一行包含三个正整数r，c，n，分别表示矩阵的行数、列数以及天数。每个整数均不超过100。接下来r行，每行c个字符，描述矩阵初始时被占据的情况。每个位置上的字符只能是R，S，P三者之一，分别代表石头，剪刀，布。相邻字符之间无空格。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出n天之后的矩阵占据情况。每个位置上的字符只能是R，S，P三者之一，相邻字符之间无空格。",
    "inputExample": "<pre>3 3 1\nRRR\nRSR\nRRR\n</pre>",
    "outputExample": "<pre>RRR\nRRR\nRRR\n</pre>",
    "tip": "Waterloo local 2003.01.25",
    "timeLimited": "5000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "2391",
    "category": "1.8编程基础之多维数组",
    "title": "17:最好的草",
    "description": "<p style=\"white-space: normal;\">奶牛Bessie计划好好享受柔软的春季新草。新草分布在R行C列的牧场里。它想计算一下牧场中的草丛数量。</p><p style=\"white-space: normal;\">在牧场地图中，每个草丛要么是单个“#”，要么是有公共边的相邻两个“#”。给定牧场地图，计算有多少个草丛。</p><p style=\"white-space: normal;\">例如，考虑如下5行6列的牧场地图<br></p><pre style=\"overflow-x: auto;\">.#....<br>..#...<br>..#..#<br>...##.<br>.#....<br></pre><p style=\"white-space: normal;\">这个牧场有5个草丛：一个在第一行，一个在第二列横跨了二、三行，一个在第三行，一个在第四行横跨了四、五列，最后一个在第五行。</p><p><br></p>",
    "img": "",
    "inputTip": "第一行包含两个整数R和C，中间用单个空格隔开。接下来R行，每行C个字符，描述牧场地图。字符只有“#”或“.”两种。(1 <= R, C <= 100 )",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出一个整数，表示草丛数。",
    "inputExample": "<pre>5 6\n.#....\n..#...\n..#..#\n...##.\n.#....\n</pre>",
    "outputExample": "<pre>5\n</pre>",
    "tip": "USACO Open 2008 Bronze",
    "timeLimited": "10000ms",
    "spaceLimited": "1000ms"
  },
  {
    "id": "1715",
    "category": "1.8编程基础之多维数组",
    "title": "18:肿瘤面积",
    "description": "<p>在一个正方形的灰度图片上，肿瘤是一块矩形的区域，肿瘤的边缘所在的像素点在图片中用0表示。其它肿瘤内和肿瘤外的点都用255表示。现在要求你编写一个程序，计算肿瘤内部的像素点的个数（不包括肿瘤边缘上的点）。已知肿瘤的边缘平行于图像的边缘。</p>",
    "img": "",
    "inputTip": "只有一个测试样例。第一行有一个整数n，表示正方形图像的边长。其后n行每行有n个整数，取值为0或255。整数之间用一个空格隔开。已知n不大于1000。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出一行，该行包含一个整数，为要求的肿瘤内的像素点的个数。",
    "inputExample": "<pre>5\n255 255 255 255 255\n255 0 0 0 255\n255 0 255 0 255\n255 0 0 0 255\n255 255 255 255 255\n</pre>",
    "outputExample": "<pre>1</pre>",
    "tip": "如果使用静态数组来表示图片数据，需要将该数组定义成全局变量。",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "1679",
    "category": "1.8编程基础之多维数组",
    "title": "19:肿瘤检测",
    "description": "<p>一张CT扫描的灰度图像可以用一个N*N（0 < N <= 100）的矩阵描述，矩阵上的每个点对应一个灰度值（整数），其取值范围是0-255。我们假设给定的图像中有且只有一个肿瘤。在图上监测肿瘤的方法如下：如果某个点对应的灰度值小于等于50，则这个点在肿瘤上，否则不在肿瘤上。我们把在肿瘤上的点的数目加起来，就得到了肿瘤在图上的面积。任何在肿瘤上的点，如果它是图像的边界或者它的上下左右四个相邻点中至少有一个是非肿瘤上的点，则该点称为肿瘤的边界点。肿瘤的边界点的个数称为肿瘤的周长。现在给定一个图像，要求计算其中的肿瘤的面积和周长。</p>",
    "img": "",
    "inputTip": "输入第一行包含一个正整数N（0 < N <= 100），表示图像的大小；接下来N行，每行包含图像的一行。图像的一行用N个整数表示（所有整数大于等于0，小于等于255），两个整数之间用一个空格隔开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出只有一行，该行包含两个正整数，分别为给定图像中肿瘤的面积和周长，用一个空格分开。",
    "inputExample": "<pre>6\n99 99 99 99 99 99\n99 99 99 50 99 99\n99 99 49 49 50 51\n99 50 20 25 52 99\n40 50 99 99 99 99\n99 99 99 99 99 99\n</pre>",
    "outputExample": "<pre>9 8</pre>",
    "tip": "计算概论05－模拟考试1",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "1041",
    "category": "1.8编程基础之多维数组",
    "title": "20:反反复复",
    "description": "<p style=\"white-space: normal;\">Mo和Larry发明了一种信息加密方法。他们首先决定好列数，然后将信息（只包含字母）从上往下依次填入各列，并在末尾补充一些随机字母使其成为一个完整的字母矩阵。例如，若信息是“There's no place like home on a snowy night”并且有5列，Mo会写成：</p><pre style=\"overflow-x: auto;\">t o i o y<br>h p k n n<br>e l e a i<br>r a h s g<br>e c o n h<br>s e m o t<br>n l e w x</pre><p>注意Mo只会填入字母，且全部是小写形式。在这个例子中，Mo用字母“x”填充了信息使之成为一个完整的矩阵，当然他使用任何字母都是可以的。</p><p>Mo根据这个矩阵重写信息：首先从左到右写下第一行，然后从右到左写下第二行，再从左到右写下第三行……以此左右交替地从上到下写下各行字母，形成新的字符串。这样，例子中的信息就被加密为：toioynnkpheleaigshareconhtomesnlewx。</p><p>你的工作是帮助Larry从加密后的信息中还原出原始信息（包括填充的字母）。</p>",
    "img": "",
    "inputTip": "第一行包含一个整数（范围2到20），表示使用的列数。第二行是一个长度不超过200的字符串。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "一行，即原始信息。",
    "inputExample": "<pre>5\ntoioynnkpheleaigshareconhtomesnlewx</pre>",
    "outputExample": "<pre>theresnoplacelikehomeonasnowynightx</pre>",
    "tip": "East Central North America 2004",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "6376",
    "category": "1.8编程基础之多维数组",
    "title": "21:二维数组右上左下遍历",
    "description": "<p>给定一个row行col列的整数数组array，要求从array[0][0]元素开始，按从左上到右下的对角线顺序遍历整个数组。</p><p><img src=\"http://media.openjudge.cn/images/upload/1381483836.gif\" height=\"343\" width=\"360\"><br></p>",
    "img": "",
    "inputTip": "输入的第一行上有两个整数，依次为row和col。余下有row行，每行包含col个整数，构成一个二维整数数组。（注：输入的row和col保证0 < row < 100, 0 < col < 100）",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "按遍历顺序输出每个整数。每个整数占一行。",
    "inputExample": "<pre>3 4\n1 2 4 7\n3 5 8 10\n6 9 11 12</pre>",
    "outputExample": "<pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "7207",
    "category": "1.8编程基础之多维数组",
    "title": "22:神奇的幻方",
    "description": "<p>幻方是一个很神奇的N*N矩阵，它的每行、每列与对角线，加起来的数字和都是相同的。<br>我们可以通过以下方法构建一个幻方。（阶数为奇数）<br>1.第一个数字写在第一行的中间<br>2.下一个数字，都写在上一个数字的右上方：<br>    a.如果该数字在第一行，则下一个数字写在最后一行，列数为该数字的右一列<br>    b.如果该数字在最后一列，则下一个数字写在第一列，行数为该数字的上一行<br>    c.如果该数字在右上角，或者该数字的右上方已有数字，则下一个数字写在该数字的下方</p>",
    "img": "",
    "inputTip": "一个数字N（N<=20）",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "按上方法构造的2N-1 * 2N-1的幻方",
    "inputExample": "<pre>3</pre>",
    "outputExample": "<pre>17 24 1 8 15\n23 5 7 14 16\n4 6 13 20 22\n10 12 19 21 3\n11 18 25 2 9</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65535kB"
  },
  {
    "id": "7545",
    "category": "1.8编程基础之多维数组",
    "title": "23:二维数组回形遍历",
    "description": "<p>给定一个row行col列的整数数组array，要求从array[0][0]元素开始，按回形从外向内顺时针顺序遍历整个数组。如图所示：</p><p><img src=\"http://media.openjudge.cn/images/upload/1415002182.gif\" height=\"322\" width=\"275\"><br></p>",
    "img": "",
    "inputTip": "输入的第一行上有两个整数，依次为row和col。余下有row行，每行包含col个整数，构成一个二维整数数组。（注：输入的row和col保证0 < row < 100, 0 < col < 100）",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "按遍历顺序输出每个整数。每个整数占一行。",
    "inputExample": "<pre>4 4\n1 2 3 4\n12 13 14 5\n11 16 15 6\n10 9 8 7</pre>",
    "outputExample": "<pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16</pre>",
    "tip": "北京大学2009年医学部练习题",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "8184",
    "category": "1.8编程基础之多维数组",
    "title": "24:蛇形填充数组",
    "description": "<p>用数字1,2,3,4,...,n*n这n<sup>2</sup>个数蛇形填充规模为n*n的方阵。</p><p>蛇形填充方法为：</p><p>对于每一条左下-右上的斜线，从左上到右下依次编号1,2,...,2n-1；按编号从小到大的顺序，将数字从小到大填入各条斜线，其中编号为奇数的从左下向右上填写，编号为偶数的从右上到左下填写。</p><p>比如n=4时，方阵填充为如下形式：</p><pre style=\"overflow-x: auto;\">1  2  6  7\n3  5  8  13\n4  9  12 14\n10 11 15 16\n</pre>",
    "img": "",
    "inputTip": "输入一个不大于10的正整数n，表示方阵的行数。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "输出该方阵，相邻两个元素之间用单个空格间隔。",
    "inputExample": "<pre>4</pre>",
    "outputExample": "<pre>1 2 6 7\n3 5 8 13\n4 9 12 14\n10 11 15 16</pre>",
    "tip": "",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  },
  {
    "id": "2422",
    "category": "1.8编程基础之多维数组",
    "title": "25:螺旋加密",
    "description": "<p>Chip和Dale发明了一种文本信息加密技术。他们事先秘密约定好矩阵的行数和列数。接着，将字符按如下方式编码：</p><p>1. 所有文本只包含大写字母和空格。</p><p>2. 每个字符均赋予一个数值：空格=0，A=1，B=2，……，Y=25，Z=26。<br></p><p>按照下图所示的方式，将每个字符对应数值的5位二进制数依次填入矩阵。最后用0将矩阵补充完整。例如，对于信息“ACM”，行列数均为4时，矩阵将被填充为：<br></p><p><img border=\"0\" src=\"http://media.openjudge.cn/images/3421.jpg\" width=\"553\" height=\"346\" style=\"text-align: center; white-space: normal;\"><br></p><p>将矩阵中的数字按行连起来形成数字串，完成加密。例子中的信息最终会被加密为：0000110100101100。<br></p>",
    "img": "",
    "inputTip": "一行。首先是两个整数R(1≤R≤20)和C(1≤C≤20)，表示行数和列数。之后是一个只包含大写字母和空格的字符串。字符串的长度≤(R*C)/5。R和C之间以及C和字符串之间均用单个空格隔开。",
    "inputStyle": "输入",
    "outputTip": "输出",
    "outputStyle": "一行，为加密后的二进制串。注意你可能需要用0将矩阵补充完整。",
    "inputExample": "<pre>4 4 ACM</pre>",
    "outputExample": "<pre>0000110100101100</pre>",
    "tip": "Greater NY 2007",
    "timeLimited": "1000ms",
    "spaceLimited": "65536kB"
  }
]